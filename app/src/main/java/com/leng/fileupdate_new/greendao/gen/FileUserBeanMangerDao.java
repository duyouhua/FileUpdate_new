package com.leng.fileupdate_new.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.leng.fileupdate_new.Bean.FileUserBeanManger;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_USER_BEAN_MANGER".
*/
public class FileUserBeanMangerDao extends AbstractDao<FileUserBeanManger, Long> {

    public static final String TABLENAME = "FILE_USER_BEAN_MANGER";

    /**
     * Properties of entity FileUserBeanManger.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MFileNamedao = new Property(1, String.class, "mFileNamedao", false, "M_FILE_NAMEDAO");
        public final static Property MFilePathdao = new Property(2, String.class, "mFilePathdao", false, "M_FILE_PATHDAO");
        public final static Property MFileTypedao = new Property(3, String.class, "mFileTypedao", false, "M_FILE_TYPEDAO");
        public final static Property MFileOther1 = new Property(4, String.class, "mFileOther1", false, "M_FILE_OTHER1");
        public final static Property MFileOther2 = new Property(5, String.class, "mFileOther2", false, "M_FILE_OTHER2");
    };


    public FileUserBeanMangerDao(DaoConfig config) {
        super(config);
    }
    
    public FileUserBeanMangerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_USER_BEAN_MANGER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"M_FILE_NAMEDAO\" TEXT," + // 1: mFileNamedao
                "\"M_FILE_PATHDAO\" TEXT," + // 2: mFilePathdao
                "\"M_FILE_TYPEDAO\" TEXT," + // 3: mFileTypedao
                "\"M_FILE_OTHER1\" TEXT," + // 4: mFileOther1
                "\"M_FILE_OTHER2\" TEXT);"); // 5: mFileOther2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_USER_BEAN_MANGER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileUserBeanManger entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mFileNamedao = entity.getMFileNamedao();
        if (mFileNamedao != null) {
            stmt.bindString(2, mFileNamedao);
        }
 
        String mFilePathdao = entity.getMFilePathdao();
        if (mFilePathdao != null) {
            stmt.bindString(3, mFilePathdao);
        }
 
        String mFileTypedao = entity.getMFileTypedao();
        if (mFileTypedao != null) {
            stmt.bindString(4, mFileTypedao);
        }
 
        String mFileOther1 = entity.getMFileOther1();
        if (mFileOther1 != null) {
            stmt.bindString(5, mFileOther1);
        }
 
        String mFileOther2 = entity.getMFileOther2();
        if (mFileOther2 != null) {
            stmt.bindString(6, mFileOther2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileUserBeanManger entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mFileNamedao = entity.getMFileNamedao();
        if (mFileNamedao != null) {
            stmt.bindString(2, mFileNamedao);
        }
 
        String mFilePathdao = entity.getMFilePathdao();
        if (mFilePathdao != null) {
            stmt.bindString(3, mFilePathdao);
        }
 
        String mFileTypedao = entity.getMFileTypedao();
        if (mFileTypedao != null) {
            stmt.bindString(4, mFileTypedao);
        }
 
        String mFileOther1 = entity.getMFileOther1();
        if (mFileOther1 != null) {
            stmt.bindString(5, mFileOther1);
        }
 
        String mFileOther2 = entity.getMFileOther2();
        if (mFileOther2 != null) {
            stmt.bindString(6, mFileOther2);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileUserBeanManger readEntity(Cursor cursor, int offset) {
        FileUserBeanManger entity = new FileUserBeanManger( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mFileNamedao
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mFilePathdao
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mFileTypedao
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mFileOther1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // mFileOther2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileUserBeanManger entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMFileNamedao(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMFilePathdao(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMFileTypedao(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMFileOther1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMFileOther2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileUserBeanManger entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileUserBeanManger entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
