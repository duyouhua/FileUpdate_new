package com.leng.fileupdate_new.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.leng.fileupdate_new.Bean.FileUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_USER".
*/
public class FileUserDao extends AbstractDao<FileUser, Long> {

    public static final String TABLENAME = "FILE_USER";

    /**
     * Properties of entity FileUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MFileNamedao = new Property(1, String.class, "mFileNamedao", false, "M_FILE_NAMEDAO");
        public final static Property MFilePathdao = new Property(2, String.class, "mFilePathdao", false, "M_FILE_PATHDAO");
        public final static Property MFileTypedao = new Property(3, String.class, "mFileTypedao", false, "M_FILE_TYPEDAO");
        public final static Property MFileProgresdao = new Property(4, int.class, "mFileProgresdao", false, "M_FILE_PROGRESDAO");
        public final static Property MFilexOther1 = new Property(5, int.class, "mFilexOther1", false, "M_FILEX_OTHER1");
        public final static Property MFilexOther2 = new Property(6, int.class, "mFilexOther2", false, "M_FILEX_OTHER2");
        public final static Property MFilexOther3 = new Property(7, int.class, "mFilexOther3", false, "M_FILEX_OTHER3");
        public final static Property MFileOther1dao = new Property(8, String.class, "mFileOther1dao", false, "M_FILE_OTHER1DAO");
        public final static Property MFileOther2dao = new Property(9, String.class, "mFileOther2dao", false, "M_FILE_OTHER2DAO");
        public final static Property MFileOther3dao = new Property(10, String.class, "mFileOther3dao", false, "M_FILE_OTHER3DAO");
        public final static Property MFileOther4dao = new Property(11, String.class, "mFileOther4dao", false, "M_FILE_OTHER4DAO");
    };


    public FileUserDao(DaoConfig config) {
        super(config);
    }
    
    public FileUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"M_FILE_NAMEDAO\" TEXT," + // 1: mFileNamedao
                "\"M_FILE_PATHDAO\" TEXT," + // 2: mFilePathdao
                "\"M_FILE_TYPEDAO\" TEXT," + // 3: mFileTypedao
                "\"M_FILE_PROGRESDAO\" INTEGER NOT NULL ," + // 4: mFileProgresdao
                "\"M_FILEX_OTHER1\" INTEGER NOT NULL ," + // 5: mFilexOther1
                "\"M_FILEX_OTHER2\" INTEGER NOT NULL ," + // 6: mFilexOther2
                "\"M_FILEX_OTHER3\" INTEGER NOT NULL ," + // 7: mFilexOther3
                "\"M_FILE_OTHER1DAO\" TEXT," + // 8: mFileOther1dao
                "\"M_FILE_OTHER2DAO\" TEXT," + // 9: mFileOther2dao
                "\"M_FILE_OTHER3DAO\" TEXT," + // 10: mFileOther3dao
                "\"M_FILE_OTHER4DAO\" TEXT);"); // 11: mFileOther4dao
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mFileNamedao = entity.getMFileNamedao();
        if (mFileNamedao != null) {
            stmt.bindString(2, mFileNamedao);
        }
 
        String mFilePathdao = entity.getMFilePathdao();
        if (mFilePathdao != null) {
            stmt.bindString(3, mFilePathdao);
        }
 
        String mFileTypedao = entity.getMFileTypedao();
        if (mFileTypedao != null) {
            stmt.bindString(4, mFileTypedao);
        }
        stmt.bindLong(5, entity.getMFileProgresdao());
        stmt.bindLong(6, entity.getMFilexOther1());
        stmt.bindLong(7, entity.getMFilexOther2());
        stmt.bindLong(8, entity.getMFilexOther3());
 
        String mFileOther1dao = entity.getMFileOther1dao();
        if (mFileOther1dao != null) {
            stmt.bindString(9, mFileOther1dao);
        }
 
        String mFileOther2dao = entity.getMFileOther2dao();
        if (mFileOther2dao != null) {
            stmt.bindString(10, mFileOther2dao);
        }
 
        String mFileOther3dao = entity.getMFileOther3dao();
        if (mFileOther3dao != null) {
            stmt.bindString(11, mFileOther3dao);
        }
 
        String mFileOther4dao = entity.getMFileOther4dao();
        if (mFileOther4dao != null) {
            stmt.bindString(12, mFileOther4dao);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mFileNamedao = entity.getMFileNamedao();
        if (mFileNamedao != null) {
            stmt.bindString(2, mFileNamedao);
        }
 
        String mFilePathdao = entity.getMFilePathdao();
        if (mFilePathdao != null) {
            stmt.bindString(3, mFilePathdao);
        }
 
        String mFileTypedao = entity.getMFileTypedao();
        if (mFileTypedao != null) {
            stmt.bindString(4, mFileTypedao);
        }
        stmt.bindLong(5, entity.getMFileProgresdao());
        stmt.bindLong(6, entity.getMFilexOther1());
        stmt.bindLong(7, entity.getMFilexOther2());
        stmt.bindLong(8, entity.getMFilexOther3());
 
        String mFileOther1dao = entity.getMFileOther1dao();
        if (mFileOther1dao != null) {
            stmt.bindString(9, mFileOther1dao);
        }
 
        String mFileOther2dao = entity.getMFileOther2dao();
        if (mFileOther2dao != null) {
            stmt.bindString(10, mFileOther2dao);
        }
 
        String mFileOther3dao = entity.getMFileOther3dao();
        if (mFileOther3dao != null) {
            stmt.bindString(11, mFileOther3dao);
        }
 
        String mFileOther4dao = entity.getMFileOther4dao();
        if (mFileOther4dao != null) {
            stmt.bindString(12, mFileOther4dao);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileUser readEntity(Cursor cursor, int offset) {
        FileUser entity = new FileUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mFileNamedao
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mFilePathdao
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mFileTypedao
            cursor.getInt(offset + 4), // mFileProgresdao
            cursor.getInt(offset + 5), // mFilexOther1
            cursor.getInt(offset + 6), // mFilexOther2
            cursor.getInt(offset + 7), // mFilexOther3
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mFileOther1dao
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // mFileOther2dao
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mFileOther3dao
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // mFileOther4dao
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMFileNamedao(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMFilePathdao(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMFileTypedao(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMFileProgresdao(cursor.getInt(offset + 4));
        entity.setMFilexOther1(cursor.getInt(offset + 5));
        entity.setMFilexOther2(cursor.getInt(offset + 6));
        entity.setMFilexOther3(cursor.getInt(offset + 7));
        entity.setMFileOther1dao(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMFileOther2dao(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMFileOther3dao(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMFileOther4dao(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
